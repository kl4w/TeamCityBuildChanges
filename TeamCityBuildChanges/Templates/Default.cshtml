@model TeamCityBuildChanges.Output.ChangeManifest 
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd">
<style>
    table{
  border: 0px solid black;
  border-spacing: 0px;
}

table thead tr{
  font-family: Arial, monospace;
  font-size: 14px;
}

table thead tr th{
  border-bottom: 2px solid black;
  border-top: 1px solid black;
  margin: 0px;
  padding: 2px;
  background-color: #cccccc;
}

table tr {
  font-family: arial, monospace;
  color: black;
  font-size:12px;
  background-color: white;
}

table tr.odd {
  background-color: #AAAAAA;
}

table tr td, th{
  border-bottom: 1px solid black;
  padding: 2px;
}

a:link{
  font-family:arial, monospace;
  text-decoration: none;
  color: teal;
}

a:hover{
  text-decoration: underline;
}

a:visited{
  color:black;
  text-decoration: none;
}

</style>

<html>
    <head>
        <title>TeamCity Build Change Manifest</title>
        <script type="text/javascript">
            Array.prototype.inArray = function(comparer) 
            {
                for (var i = 0; i < this.length; i++) 
                {
                    if (comparer(this[i])) return true;
                }
                return false;
            };

            Array.prototype.pushIfNotExist = function(element, count, comparer) 
            {
                if (!this.inArray(comparer)) 
                {
                    this.push(element);
                    count++;
                }
            };

            addRow = function(table, element) 
            {
                var row = document.createElement("tr");
                addCell(row, element.package);
                addCell(row, element.oldVersion);
                addCell(row, element.newVersion);
                table.appendChild(row);
            };

            addCell = function(row, element) 
            {
                var cell = document.createElement("td");
                cell.textContent = element;
                row.appendChild(cell);
            };

            window.onload = function ()
            {
                var packageChanges = [];
                var count = 0;
                @foreach (var change in Model.NuGetPackageChanges)
                {
                    <text>
                        var element = { id : count, package : "@change.PackageId", oldVersion : "@change.OldVersion", newVersion : "@change.NewVersion" };
                        packageChanges.pushIfNotExist(element, count, function(e) 
                        {
                            return e.id == element.id && e.package == element.package && e.oldVersion == element.oldVersion && e.newVersion == element.newVersion;
                        });
                    </text>
                    foreach (var innerChange in change.ChangeManifest.NuGetPackageChanges)
                    {
                        <text>
                            var innerElement = { id : count, package : "@innerChange.PackageId", oldVersion : "@innerChange.OldVersion", newVersion : "@innerChange.NewVersion" };
                            packageChanges.pushIfNotExist(innerElement, count, function(e)
                            {
                                return e.id == innerElement.id && e.package == innerElement.package && e.oldVersion == innerElement.oldVersion && e.newVersion == innerElement.newVersion;
                            });
                        </text>
                    }
                }

                var table = document.getElementById("packageChanges");
                packageChanges.forEach(function (items) 
                {
                    addRow(table, items);
                });
            }
        </script>
    </head>
    <body>
        <div>
            <table>
                <tr>
                    <th>Build Configuration</th>
                    <th>Reference Build Configuration</th>
                    <th>From Version</th>
                    <th>To Version</th>
                    <th>Generation Date</th>
                </tr>
                <tr>
                    <td>@Model.BuildConfiguration.Name</td>
                    <td>@Model.ReferenceBuildConfiguration.Name</td>
                    <td>@Model.FromVersion</td>
                    <td>@Model.ToVersion</td>
                    <td>@Model.Generated.ToString()</td>
                </tr>
            </table>
        </div>
        <br/>
        <div>
            @if (Model.ChangeDetails.Any())
            {
                <table>
                    <tr>
                        <th>VCS Version</th>
                        <th>Commit Comment</th>
                    </tr>
                    @foreach (var change in Model.ChangeDetails)
                    {
                        <tr>
                            <td>@change.Version</td>
                            <td>@change.Comment</td>
                        </tr>
                    }
                </table>
            }
        </div>
        <br />
        <div>
            @if (Model.IssueDetails.Any())
            {
                <table>
                    <tr>
                        <th>Issue ID</th>
                        <th>Type</th>
                        <th>Summary</th>
                        <th>Status</th>
                        <th>Created</th>
                    </tr>
                    @foreach (var issue in Model.IssueDetails)
                    {
                        <tr>
                            <td><a href="@issue.Url">@issue.Id</a></td>
                            <td>@issue.Type</td>
                            <td>@issue.Summary</td>
                            <td>@issue.Status</td>
                            <td>@issue.Created</td>
                        </tr>
                        foreach (var child in issue.SubIssues)
                        {
                            <tr style="font-style: italic">
                                <td><a href="@child.Url">@child.Id</a></td>
                                <td>@child.Type</td>
                                <td>@child.Summary</td>
                                <td>@child.Status</td>
                                <td>@child.Created</td>
                            </tr>
                            foreach (var subIssue in child.SubIssues)
                            {
                                <tr style="font-style:oblique">
                                    <td><a href="@subIssue.Url">@subIssue.Id</a></td>
                                    <td>@subIssue.Type</td>
                                    <td>@subIssue.Summary</td>
                                    <td>@subIssue.Status</td>
                                    <td>@subIssue.Created</td>
                                </tr>
                            }
                        }
                    }
                </table>
            }
        </div>
        <br/>
        <div>
            @if (Model.NuGetPackageChanges.Any())
            {
                <table>
                    <tbody id="packageChanges">
                        <tr>
                            <th>Package Id</th>
                            <th>From Version</th>
                            <th>To Version</th>
                        </tr>
                    </tbody>
                </table>
            }
        </div>
    </body>
</html>